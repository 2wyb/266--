#coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""
基于pytorch的网络编写
实现一个网络完成一个nlp多分类任务
判断文本中是否有某些特定字符出现
"""

class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab, hidden_size):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim)   #embedding层,也是要训练的参数，入参(字符总数，字符向量维度)，字符向量的维度可以自己随意定
        self.layer = nn.RNN(vector_dim, hidden_size, batch_first=True) #RNN层
        self.pool = nn.AvgPool1d(sentence_length)   #池化层，用来降维，融合不同字符信息进行降维，
        self.classify = nn.Linear(hidden_size, 4)     #线性层, 4代表4分类
        self.loss = nn.CrossEntropyLoss()  #loss函数采用交叉熵，计算交叉熵是标签必须是LongTensor

    #当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        x = self.embedding(x)     #(batch_size, sen_len) -> (batch_size, sen_len, vector_dim)
        x, h = self.layer(x)      #输出的x为 (batch_size, sen_len, vector_dim) -> (batch_size, sen_len, hidden_size)
        x = x.transpose(1,2)      #(batch_size, sen_len, hidden_size) -> (batch_size,, hidden_size，sen_len) 所以可以先对最后两维调换，保证对文本长度sen_len降维，这样能够融合不同字符信息。否则对vector_dim降维，是对一个字符的一行向量降维，最后等于是用一个标量表示一个字符了
        x = self.pool(x)          #(batch_size, hidden_size，sen_len) -> (batch_size, hidden_size，1)
        x = x.squeeze()           #(batch_size, hidden_size，1) -> (batch_size, hidden_size) 去掉不需要的维度
        y_pred  = self.classify(x)      #(batch_size, hidden_size) -> (batch_size, 4)
        if y is not None:
            return self.loss(y_pred, y)   #预测值和真实值计算损失，计算交叉熵是标签必须是LongTensor
        else:
            return torch.argmax(y_pred,dim=1)    #输出y_pred中的最大值所在的下标，即预测的类别结果。因为真实的标签是一个0、1矩阵，1所在的索引即为标签。所以y_pred中每行最大元素值对应的下标就是预测的标签


#字符集随便挑了一些字，实际上还可以扩充
#为每个字生成一个标号
#{"a":1, "b":2, "c":3...}
#abc -> [1,2,3]
def build_vocab():
    chars = "abcdefghijklmnopqrstuvwxyz"  #字符集
    vocab = {}
    for index, char in enumerate(chars):
        vocab[char] = index   #每个字对应一个序号
    vocab['unk'] = len(vocab)
    return vocab    #返回一个字典

#随机生成一个样本
#从所有字中选取sentence_length个字
#反之为负样本
def build_sample(vocab, sentence_length):
    #随机从字表选取sentence_length个字，可能重复
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]  #random.choice(list()) 随机返回列表中的一个值。vocab.keys()为字典中所有关键字['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'unk']
    #指定哪些字出现时为正样本
    if set("ab") & set(x):  #判断是否与abc有交集
        y = 1
    elif set("cd") & set(x):
        y = 2
    elif set('ef') & set(x):
        y = 3
    #指定字都未出现，则为负样本
    else:
        y = 0
    x = [vocab.get(word, vocab['unk']) for word in x]   #将字符转换成序号，为了做embedding抽取出每个字符所对应的向量。
    return x, y


#建立数据集
#输入需要的样本数量。需要多少生成多少
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    # 1类样本的个数为T1，二类样本的个数为T2，三类样本的个数为T3，0类样本的个数为T0
    T1, T2, T3, T0 = 0, 0, 0, 0
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
        if y==1:
            T1+=1
        elif y==2:
            T2+=1
        elif y==3:
            T3+=1
        else:
            T0+=1
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y), T1, T2, T3, T0  #LongTensor是64位整型，embedding层的输入必须是长整型，这是规定死的。所以这里要转化成长整型



#建立模型
def build_model(char_dim, sentence_length, vocab, hidden_size):
    model = TorchModel(char_dim, sentence_length, vocab, hidden_size)
    return model



#测试代码
#用来测试每轮模型的准确率
def evaluate(model, vocab, sample_length):
    model.eval()
    x, y, T1, T2, T3, T0 = build_dataset(200, vocab, sample_length)   #建立200个用于测试的样本
    # 1类样本的个数为T1，二类样本的个数为T2，三类样本的个数为T3，0类样本的个数为T0
    print("本次预测集中，1类样本%d个，2类样本%d个，3类样本%d个，0类样本%d个"%(T1, T2, T3, T0))
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)      #模型预测
        for y_p, y_t in zip(y_pred, y):  #与真实标签进行对比
            if int(y_p) == int(y_t) :
                correct += 1   #负样本判断正确
            else:
                wrong += 1
    print("正确预测个数：%d, 正确率：%f"%(correct, correct/(correct+wrong)))
    return correct/(correct+wrong)


def main():
    #配置参数
    epoch_num = 100        #训练轮数
    batch_size = 25       #每次训练样本个数
    train_sample = 800    #每轮训练总共训练的样本总数
    char_dim = 15         #每个字的维度
    sentence_length = 6   #样本文本长度
    learning_rate = 0.005 #学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    hidden_size = 10
    model = build_model(char_dim, sentence_length, vocab, hidden_size)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y, T1, T2, T3, T0 = build_dataset(batch_size, vocab, sentence_length) #构造一组训练样本
            optim.zero_grad()    #梯度归零，这一步也可以放在“更新权重”这个步骤后边
            loss = model(x, y)   #计算loss，这里是batch中所有样本的平均损失
            loss.backward()      #计算梯度
            optim.step()         #更新权重
            watch_loss.append(loss.item())   # loss.item() 取出张量所对应的元素值
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)   #测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])
    #画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  #画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  #画loss曲线
    plt.legend()
    plt.show()
    #保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))   # json.dumps() 生成json字符串格式，ensure_ascii=False 正常显示中文，indent=2 前面空两个字符
    writer.close()
    return

#使用训练好的模型做预测
def predict(model_path, vocab_path, input_strings):
    char_dim = 15  # 每个字的维度
    sentence_length = 6  # 样本文本长度
    hidden_size = 10  #隐藏层的个数
    vocab = json.load(open(vocab_path, "r", encoding="utf8")) #加载字符表
    model = build_model(char_dim, sentence_length, vocab, hidden_size)     #建立模型
    model.load_state_dict(torch.load(model_path))             #加载训练好的权重
    x = []
    for input_string in input_strings:
        # x.append([ vocab[char] for char in input_string ])  #将输入序列化。这是老师给的，有问题，对于未知字符无法识别。自己将其改为下一行了
        x.append([ vocab.get(char, vocab['unk']) for char in input_string])  #将输入序列化
    model.eval()   #测试模式
    with torch.no_grad():  #不计算梯度
        result = model.forward(torch.LongTensor(x))  #模型预测
    for i, input_string in enumerate(input_strings):
        print("输入：%s,  预测类别：%d" % (input_string, result[i])) #打印结果



if __name__ == "__main__":
    main()

    print("\n\n")
    test_strings = ["athtkj", "wwsdfg","ekjook","brqwdg", "nakwww","cddddd","qqq###","aa2221"]  #在Predict()中规定死了样本字符串的长度为6
    predict("model.pth", "vocab.json", test_strings)
