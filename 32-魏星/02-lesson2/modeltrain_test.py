import numpy as np
import math
import matplotlib.pyplot as plt

'''
需准备训练数据，
设定学习率，选择损失函数、设定损失函数值(训练停止条件)
选定模型(包括随机初始化参数权重)

将样本输入模型的输出(预测值)与真实值带入损失函数，损失函数值是否满足训练停止条件
如不满足和调整模型参数，继续训练，直至满足停止条件

调整参数方法：梯度下降法
'''

#训练样本
# X = [0.01 * i for i in range(100)]
# Y = [6*math.sin(x) + 2*x**3 - 3*x**2 + 7*x + 10 for x in X]
# print(X)
# print(Y)

# 模型
def func(x):
    return w1*x**3+w2*x**2+w3*x+w4+6*math.sin(x)


# 损失函数
def loss(y_true, y_pred):
    return (y_pred - y_true) ** 2


#学习率
lr = 0.2

#训练停止条件，损失函数最小值
loss_min = 0.01

#随机初始化权重
w1,w2,w3,w4=np.random.randint(-1,1),np.random.randint(-1,1),np.random.randint(-1,1),np.random.randint(-1,1)

#训练样本
X = [0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41000000000000003, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47000000000000003, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.5700000000000001, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.6900000000000001, 0.7000000000000001, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.8200000000000001, 0.8300000000000001, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.9400000000000001, 0.9500000000000001, 0.96, 0.97, 0.98, 0.99]
Y = [10.0, 10.129701000005, 10.258808000159998, 10.387327001214974, 10.515264005119805, 10.64262501562407, 10.769416038876667, 10.895643084025197, 11.021312163815036, 11.146429295188067, 11.27100049988097, 11.395031805023049, 11.518529243733516, 11.641498855718169, 11.763946687865419, 11.885878794841595, 12.007301239685475, 12.128220094401977, 12.248641440554945, 12.368571369859003, 12.488015984770367, 12.606981399076597, 12.725473738485217, 12.84349914121113, 12.961063758562808, 13.078173755527137, 13.19483531135293, 13.311054620132987, 13.426837891384682, 13.542191350629013, 13.657121239968038, 13.77163381866066, 13.885735363696707, 13.99943217036921, 14.112730552844887, 14.225636844732708, 14.338157399650541, 14.450298591789771, 14.562066816477897, 14.67346849073897, 14.784510053851903, 14.895197967906537, 15.005538718357421, 15.115538814575265, 15.225204790395997, 15.334543204667382, 15.44356064179312, 15.55226371227441, 15.660659053248898, 15.768753329026948, 15.876553231625218, 15.984065481297446, 16.091296827062422, 16.19825404722908, 16.30494394991868, 16.411373373583956, 16.5175491875253, 16.623478292403817, 16.72916762075124, 16.834624137476702, 16.939854840370213, 17.044866760602886, 17.14966696322383, 17.254262547653617, 17.358660648174354, 17.462868434416237, 17.566893111840603, 17.670741922219356, 17.77442214411081, 17.877941093331806, 17.981306123426148, 18.08452462612922, 18.18760403182884, 18.290551810022187, 18.39337546976887, 18.496082560140003, 18.59868067066331, 18.70117743176414, 18.803580515202462, 18.905897634505646, 19.008136545397136, 19.110305046220855, 19.212410978361376, 19.314462226659778, 19.416466719825156, 19.518432430841756, 19.62036737737166, 19.72227962215303, 19.824177273393815, 19.926068485160943, 20.027961457764903, 20.129864438139702, 20.2317857202182, 20.333733645302665, 20.435716602430688, 20.537743028736244, 20.63982140980599, 20.7419602800307, 20.844168222951822, 20.946453871603122]

for epoch in range(10000):
    epoch_loss = 0
    for x,y_true in zip(X,Y):
        y_pred = func(x)
        epoch_loss += loss(y_pred, y_true)

        # loss函数分别对w1,w2,w3,w4求导
        grad_w1 = 2*(y_pred-y_true)*x**3
        grad_w2 = 2*(y_pred-y_true)*x**2
        grad_w3 = 2*(y_pred-y_true)*x
        grad_w4 = 2*(y_pred-y_true)
        w1 = w1 - lr * grad_w1
        w2 = w2 - lr * grad_w2
        w3 = w3 - lr * grad_w3
        w4 = w4 - lr * grad_w4

    print("第%d轮， loss %f" % (epoch, epoch_loss))
    if epoch_loss/len(X) < loss_min:
        break

print("训练后的权重为w1,w2,w3,w4:",w1,w2,w3,w4)

#训练后
Y_P = [func(x) for x in X]

plt.figure()
# plt.subplot(121)
plt.title("train result figure")
plt.scatter(X,Y,color='r')
plt.scatter(X,Y_P)
plt.show()

# # 验证
# X2 = [0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41000000000000003, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47000000000000003, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.5700000000000001, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.6900000000000001, 0.7000000000000001, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.8200000000000001, 0.8300000000000001, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.9400000000000001, 0.9500000000000001, 0.96, 0.97, 0.98, 0.99, 1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11, 1.12, 1.1300000000000001, 1.1400000000000001, 1.1500000000000001, 1.16, 1.17, 1.18, 1.19, 1.2, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.3800000000000001, 1.3900000000000001, 1.4000000000000001, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5, 1.51, 1.52, 1.53, 1.54, 1.55, 1.56, 1.57, 1.58, 1.59, 1.6, 1.61, 1.62, 1.6300000000000001, 1.6400000000000001, 1.6500000000000001, 1.6600000000000001, 1.67, 1.68, 1.69, 1.7, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79, 1.8, 1.81, 1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.8800000000000001, 1.8900000000000001, 1.9000000000000001, 1.9100000000000001, 1.92, 1.93, 1.94, 1.95, 1.96, 1.97, 1.98, 1.99, 2.0, 2.0100000000000002, 2.02, 2.0300000000000002, 2.04, 2.05, 2.06, 2.07, 2.08, 2.09, 2.1, 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 2.17, 2.18, 2.19, 2.2, 2.21, 2.22, 2.23, 2.24, 2.25, 2.2600000000000002, 2.27, 2.2800000000000002, 2.29, 2.3000000000000003, 2.31, 2.32, 2.33, 2.34, 2.35, 2.36, 2.37, 2.38, 2.39, 2.4, 2.41, 2.42, 2.43, 2.44, 2.45, 2.46, 2.47, 2.48, 2.49, 2.5, 2.5100000000000002, 2.52, 2.5300000000000002, 2.54, 2.5500000000000003, 2.56, 2.57, 2.58, 2.59, 2.6, 2.61, 2.62, 2.63, 2.64, 2.65, 2.66, 2.67, 2.68, 2.69, 2.7, 2.71, 2.72, 2.73, 2.74, 2.75, 2.7600000000000002, 2.77, 2.7800000000000002, 2.79, 2.8000000000000003, 2.81, 2.82, 2.83, 2.84, 2.85, 2.86, 2.87, 2.88, 2.89, 2.9, 2.91, 2.92, 2.93, 2.94, 2.95, 2.96, 2.97, 2.98, 2.99]
# Y2 = [10.0, 10.129701000005, 10.258808000159998, 10.387327001214974, 10.515264005119805, 10.64262501562407, 10.769416038876667, 10.895643084025197, 11.021312163815036, 11.146429295188067, 11.27100049988097, 11.395031805023049, 11.518529243733516, 11.641498855718169, 11.763946687865419, 11.885878794841595, 12.007301239685475, 12.128220094401977, 12.248641440554945, 12.368571369859003, 12.488015984770367, 12.606981399076597, 12.725473738485217, 12.84349914121113, 12.961063758562808, 13.078173755527137, 13.19483531135293, 13.311054620132987, 13.426837891384682, 13.542191350629013, 13.657121239968038, 13.77163381866066, 13.885735363696707, 13.99943217036921, 14.112730552844887, 14.225636844732708, 14.338157399650541, 14.450298591789771, 14.562066816477897, 14.67346849073897, 14.784510053851903, 14.895197967906537, 15.005538718357421, 15.115538814575265, 15.225204790395997, 15.334543204667382, 15.44356064179312, 15.55226371227441, 15.660659053248898, 15.768753329026948, 15.876553231625218, 15.984065481297446, 16.091296827062422, 16.19825404722908, 16.30494394991868, 16.411373373583956, 16.5175491875253, 16.623478292403817, 16.72916762075124, 16.834624137476702, 16.939854840370213, 17.044866760602886, 17.14966696322383, 17.254262547653617, 17.358660648174354, 17.462868434416237, 17.566893111840603, 17.670741922219356, 17.77442214411081, 17.877941093331806, 17.981306123426148, 18.08452462612922, 18.18760403182884, 18.290551810022187, 18.39337546976887, 18.496082560140003, 18.59868067066331, 18.70117743176414, 18.803580515202462, 18.905897634505646, 19.008136545397136, 19.110305046220855, 19.212410978361376, 19.314462226659778, 19.416466719825156, 19.518432430841756, 19.62036737737166, 19.72227962215303, 19.824177273393815, 19.926068485160943, 20.027961457764903, 20.129864438139702, 20.2317857202182, 20.333733645302665, 20.435716602430688, 20.537743028736244, 20.63982140980599, 20.7419602800307, 20.844168222951822, 20.946453871603122, 21.048825908847377, 21.151293067708092, 21.25386413169618, 21.356547935131623, 21.459353363460032, 21.562289353564104, 21.665364894069917, 21.76858902564809, 21.871970841309686, 21.975519486696925, 22.079244160368614, 22.183154114080285, 22.287258653059034, 22.391567136272954, 22.496088976695297, 22.600833641563128, 22.7058106526306, 22.811029586416815, 22.916500074448123, 23.022231803495, 23.128234515803356, 23.234518009320315, 23.341092137914405, 23.447966811590184, 23.555151996697234, 23.662657716133516, 23.770494049543096, 23.878671133508156, 23.98719916173535, 24.09608838523644, 24.205349112503157, 24.314991709676402, 24.42502660070959, 24.53546426752627, 24.646315250171916, 24.757590146959956, 24.869299614611897, 24.981454368391685, 25.09406518223416, 25.20714288886766, 25.32069837993076, 25.434742606083102, 25.549286577110315, 25.664341362023066, 25.77991808915012, 25.89602794622553, 26.012682180469866, 26.129892098665486, 26.247669067225843, 26.36602451225886, 26.484969919624326, 26.60451683498529, 26.7246768638535, 26.845461671628858, 26.96688298363288, 27.08895258513614, 27.211682321379797, 27.335084097591007, 27.45916987899244, 27.583951690805748, 27.70944161824903, 27.835651806528347, 27.962594460823144, 28.090281846265796, 28.21872628791504, 28.347940170723515, 28.477935939499226, 28.60872609886108, 28.740323213188454, 28.87273990656471, 29.005988862714812, 29.140082824936947, 29.275034596028206, 29.410857038204295, 29.547563073013322, 29.68516568124362, 29.82367790282571, 29.963112836728275, 30.103483640848268, 30.24480353189515, 30.38708578526917, 30.530343734933894, 30.674590773282738, 30.819840350999783, 30.96610597691469, 31.113401217851802, 31.261739698473484, 31.411135101117665, 31.561601165629572, 31.713151689187786, 31.865800526124488, 32.019561587740064, 32.17444884211195, 32.33047631389783, 32.4876580841332, 32.64600829002322, 32.805541124729004, 32.96627083714837, 33.12821173169086, 33.29137816804735, 33.455784560954086, 33.62144537995121, 33.78837514913577, 33.956588446909365, 34.12609990572028, 34.296924211800246, 34.46907610489585, 34.64257037799447, 34.8174218770451, 34.99364550067367, 35.17125619989324, 35.35026897780885, 35.53069888931726, 35.71256104080142, 35.89587058981988, 36.080642744790985, 36.26689276467211, 36.454635958633645, 36.643887685728245, 36.83466335455477, 37.02697842291755, 37.22084839748048, 37.41628883341652, 37.61331533405203, 37.81194355050653, 38.01218918132753, 38.21406797212076, 38.41759571517552, 38.62278824908553, 38.829661458365024, 39.038231273060326, 39.24851366835683, 39.460524664181506, 39.67428032480092, 39.889796758414754, 40.10709011674507, 40.32617659462106, 40.547072429559634, 40.769793901341615, 40.99435733158384, 41.2207790833069, 41.449075560498954, 41.679263207675206, 41.9113585094336, 42.145377990006224, 42.38133821280703, 42.61925577997535, 42.859147331915835, 43.10102954683427, 43.344919140269894, 43.590832864623735, 43.83878750868348, 44.08879989714449, 44.340886890127436, 44.595065382692226, 44.85135230434851, 45.109764618562764, 45.37031932226192, 45.63303344533373, 45.89792405012365, 46.16500823092879, 46.43430311348831, 46.70582585447103, 46.97959364095959, 47.25562368993189, 47.53393324773929, 47.81453958958208, 48.097460018981835, 48.38271186725123, 48.67031249296076, 48.96027928140299, 49.252629644053954, 49.547381018032105, 49.84455086555452, 50.14415667339072, 50.44621595231399, 50.75074623655034, 51.05776508322501, 51.36729007180686, 51.679338803550344, 51.99392890093544, 52.311078007105365, 52.63080378530232, 52.953123918301145, 53.27805610784098, 53.60561807405527, 53.93582755489952, 54.26870230557772, 54.604260097966666, 54.94251872003892, 55.28349597528389, 55.627209682127585, 55.97367767335069, 56.3229177955054, 56.67494790833062, 57.029785884166174, 57.3874496073654, 57.74795697370688, 58.11132588980473, 58.47757427251807]
# Y2_P = [func(x) for x in X2]
#
# # plt.figure()
# plt.subplot(122)
# plt.title("test result figure")
# plt.scatter(X2,Y2,color='r')
# plt.scatter(X2,Y2_P)
# plt.show()